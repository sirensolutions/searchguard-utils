#!/bin/bash

# sgtool: a better front end to sgadmin
# Requires a configuration file /etc/sgtool to keep track of files, paths etc

set -e

die() {
    echo $1
    exit 1
}

declare -A filemap
filemap["actiongroups"]="sg_action_groups.yml"
filemap["config"]="sg_config.yml"
filemap["internalusers"]="sg_internal_users.yml"
filemap["roles"]="sg_roles.yml"
filemap["rolesmapping"]="sg_roles_mapping.yml"
filemap["tenants"]="sg_tenants.yml"
filemap_keys="${!filemap[@]}"

if [[ ! $SGTOOL_CONF ]]; then
    SGTOOL_CONF=/etc/sgtool
fi
if [[ ! -f $SGTOOL_CONF ]]; then
    die "Cannot read config file $SGTOOL_CONF"
fi
. ${SGTOOL_CONF}

if [[ ! $ES_BASE ]]; then
    die "No elasticsearch installation found"
fi
dir=$(ls -d ${ES_BASE}/plugins/search-guard-*|head -1)
PLUGIN_DIR=${dir##* }

if [[ ! $SG_HOST ]]; then
    SG_HOST=localhost
fi

if [[ ! $SG_PORT ]]; then
    SG_PORT=9300
fi

if [[ $CLUSTER_NAME ]]; then
    CN_FLAGS=("-cn" "$CLUSTER_NAME")
else
    CN_FLAGS=("-icl")
fi

if [[ $KEY_STORE ]]; then
    KEY_FLAGS=("-ks" "$KEY_STORE" "-kspass" "$KEY_PASS")
else
    KEY_FLAGS=("-key" "$KEY_FILE" "-kspass" "$KEY_PASS")
fi

if [[ $TRUST_STORE ]]; then
    TRUST_FLAGS=("-ts" "$TRUST_STORE" "-tspass" "$TRUST_PASS")
else
    TRUST_FLAGS=("-cert" "$CERT_FILE" "-cacert" "$CA_FILE")
fi

COMMAND=("bash" "${PLUGIN_DIR}/tools/sgadmin.sh" \
    "${TRUST_FLAGS[@]}" "${KEY_FLAGS[@]}" ${SG_EXTRA_FLAGS} \
    "${CN_FLAGS[@]}" "-h" "${SG_HOST}" "-p" "${SG_PORT}" "-nhnv")

############

case "$1" in

init)
    if [[ ! -f $SG_CONF_CACHE/sg_config.yml ]]; then
        die "No config file found"
    fi
    "${COMMAND[@]}" --enable-shard-allocation
    "${COMMAND[@]}" -cd $SG_CONF_CACHE
    ;;

reload)
    "${COMMAND[@]}" -rl
    ;;

dump)
    echo "Dumping configuration into $SG_CONF_CACHE"
    if [[ ! -d $SG_CONF_CACHE ]]; then
        mkdir -p $SG_CONF_CACHE
    fi
    cd $SG_CONF_CACHE
    "${COMMAND[@]}" -r
    for file in ${filemap[*]}; do
        base=$(basename $file .yml)
        newfile=$(ls -t ${base}_????-???-??_??-??-??.yml | head -1)
        [[ ! -f $newfile ]] || mv $newfile $file
    done
    ;;

migrate)
    echo "Migrating running configuration to latest format"
    tmpdir=$(mktemp -d)
    "${COMMAND[@]}" -migrate $tmpdir
    rm -rf $tmpdir
    ;;

push)
    type="$2"
    file="${SG_CONF_CACHE}/${filemap[$type]}"
    [[ ! -f $file ]]; then
        die "Could not find file to push"
    fi
    "${COMMAND[@]}" -f "$file" -t "$type"
    ;;

*)
    cat <<EOF
Usage: $0 <command>

Where <command> is one of:

init
        Initialise searchguard from the configuration cache directory

reload
        Reload searchguard configuration

dump
        Dump running searchguard configuration to the cache directory

migrate
        Migrate running searchguard configuration to latest format

push <configtype>
        Update only the given configuration type from the cache directory,
        where <configtype> is one of:
        ${filemap_keys}

$0 reads its configuration from /etc/sgtool. To use a different configuration
file, set the environment variable SGTOOL_CONF.

EOF
    ;;

esac
